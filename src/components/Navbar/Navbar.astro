---
// navbar.astro
import Container from "./container.astro";
import Link from "./link.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";

const menuitems = [
  {
    title: "Features",
    path: "#",
    children: [
      { title: "Action", path: "/" },
      { title: "Another action", path: "#" },
      { title: "Dropdown Submenu", path: "#" },
      { title: "404 Page", path: "/404" },
    ],
  },
  {
    title: "About",
    path: "#",
  },
  {
    title: "Schedule",
    path: "#",
  },
  {
    title: "Sponsors",
    path: "#",
  },
  {
    title: "Future Hackathons",
    path: "#",
  },
];
---
<Container>
  <header class="flex flex-col lg:flex-row justify-between items-center py-4">
    <Astronav>
      <div class="flex w-full lg:w-auto items-center justify-between">
        <a href="/" class="text-2xl">
          <span class="font-bold text-[#91ff89]">Hack</span>
          <span class="text-[#c57dff]">Reality</span>
        </a>
        <div class="flex items-center gap-3 lg:hidden">
          <!-- Profile Dropdown (mobile only) -->
          <div id="profile-menu-mobile" class="hidden relative">
            <button
              type="button"
              class="flex items-center justify-center w-8 h-8 rounded-full border-2 border-[#c57dff] overflow-hidden"
            >
              <img
                id="profile-image-mobile"
                src="#"
                alt="Profile"
                class="w-full h-full object-cover"
                referrerpolicy="no-referrer"
              />
            </button>
          </div>
          <!-- Hamburger menu -->
          <div class="block lg:hidden">
            <MenuIcon class="w-8 h-8 text-white" />
          </div>
        </div>
      </div>
      <MenuItems class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0 lg:items-center">
        <ul class="flex flex-col lg:flex-row lg:gap-3">
          {menuitems.map(item => (
            <>
              {item.children ? (
                <li class="relative group">
                  <button 
                    class="features-dropdown-trigger flex items-center lg:px-3 py-2 text-white hover:text-[#c57dff]"
                    aria-expanded="false"
                  >
                    {item.title}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="3"
                      stroke="currentColor"
                      class="w-3 h-3 ml-1"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                      />
                    </svg>
                  </button>
                  <div 
                    class="features-dropdown-content hidden lg:absolute top-full left-0 mt-2 w-48 bg-zinc-800 rounded-md shadow-lg"
                  >
                    {item.children.map(child => (
                      <a 
                        href={child.path} 
                        class="block px-4 py-2 text-sm text-white hover:bg-zinc-700"
                      >
                        {child.title}
                      </a>
                    ))}
                  </div>
                </li>
              ) : (
                <li>
                  <a
                    href={item.path}
                    class="flex lg:px-3 py-2 text-white hover:text-[#c57dff]"
                  >
                    {item.title}
                  </a>
                </li>
              )}
            </>
          ))}
        </ul>

        <div class="lg:ml-4 flex items-center gap-4">
          <!-- Auth Buttons -->
          <div id="auth-buttons" class="hidden items-center gap-4">
            <Link 
              href="/auth" 
              style="muted" 
              class="w-[100px] text-sm text-center"
            >
              Log in
            </Link>
            <Link 
              href="/auth" 
              style="primary" 
              class="w-[100px] text-sm text-center"
            >
              Sign Up
            </Link>
          </div>

          <!-- Profile Dropdown (desktop only) -->
          <div id="profile-menu" class="hidden relative">
            <button
              type="button"
              id="profile-button"
              class="flex items-center justify-center w-10 h-10 rounded-full border-2 border-[#c57dff] overflow-hidden"
            >
              <img
                id="profile-image"
                src="#"
                alt="Profile"
                class="w-full h-full object-cover"
                referrerpolicy="no-referrer"
              />
            </button>

            <div class="hidden absolute right-0 mt-2 w-48 rounded-md bg-zinc-800 shadow-lg" id="dropdown-content">
              <div class="py-1">
                <a href="/profile" class="flex items-center px-4 py-2 text-sm text-white hover:bg-zinc-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                  </svg>
                  View My Profile
                </a>
                <a href="/settings" class="flex items-center px-4 py-2 text-sm text-white hover:bg-zinc-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"></circle>
                    <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                  </svg>
                  Settings
                </a>
                <a href="/account" class="flex items-center px-4 py-2 text-sm text-white hover:bg-zinc-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                    <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                  </svg>
                  Manage Account
                </a>
                <button id="logout-button" class="flex w-full items-center px-4 py-2 text-sm text-red-400 hover:bg-zinc-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                    <polyline points="16 17 21 12 16 7"></polyline>
                    <line x1="21" y1="12" x2="9" y2="12"></line>
                  </svg>
                  Log out
                </button>
              </div>
            </div>
          </div>
        </div>
      </MenuItems>
    </Astronav>
  </header>
</Container>

<script>
  import { auth } from '@/lib/firebase';
  import { onAuthStateChanged, signOut } from 'firebase/auth';

  // DOM References
  const authButtons = document.getElementById('auth-buttons');
  const profileMenu = document.getElementById('profile-menu');
  const profileMenuMobile = document.getElementById('profile-menu-mobile');
  const profileButton = document.getElementById('profile-button');
  const dropdownContent = document.getElementById('dropdown-content');
  const profileImage = document.getElementById('profile-image');
  const profileImageMobile = document.getElementById('profile-image-mobile');
  const logoutButton = document.getElementById('logout-button');

  // Features dropdown functionality
  const featuresDropdownTriggers = document.querySelectorAll('.features-dropdown-trigger');
  const featuresDropdownContents = document.querySelectorAll('.features-dropdown-content');

  const closeAllFeaturesDropdowns = () => {
    featuresDropdownContents.forEach((dropdown) => {
      dropdown.classList.add('hidden');
    });
    featuresDropdownTriggers.forEach((trigger) => {
      trigger.setAttribute('aria-expanded', 'false');
    });
  };

  featuresDropdownTriggers.forEach((trigger, index) => {
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      const content = featuresDropdownContents[index];
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';

      closeAllFeaturesDropdowns();

      if (!isExpanded) {
        content?.classList.remove('hidden');
        trigger.setAttribute('aria-expanded', 'true');
      }
    });
  });

  // Update profile images
  /**
   * @param {import('firebase/auth').User | null} user
   */
  const updateProfileImage = (user: import('firebase/auth').User | null) => {
    const images = [profileImage, profileImageMobile];
    
    images.forEach(img => {
      if (!img || !user) return;

      const photoURL = user.photoURL;
      
      if (photoURL) {
        img.setAttribute('referrerpolicy', 'no-referrer');
        (img as HTMLImageElement).src = photoURL;

        img.onerror = () => {
          const proxyUrl = `https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?container=focus&refresh=2592000&url=${encodeURIComponent(photoURL)}`;
          (img as HTMLImageElement).src = proxyUrl;

          img.onerror = () => {
            (img as HTMLImageElement).src = '/placeholder-avatar.png';
          };
        };
      } else {
        (img as HTMLImageElement).src = '/placeholder-avatar.png';
      }
    });
  };

  // Update UI based on auth state
  function updateUI(user: import('firebase/auth').User | null) {
    if (user) {
      authButtons?.classList.add('hidden');
      authButtons?.classList.remove('flex');
      profileMenu?.classList.remove('hidden');
      profileMenuMobile?.classList.remove('hidden');
      updateProfileImage(user);
    } else {
      authButtons?.classList.remove('hidden');
      authButtons?.classList.add('flex');
      profileMenu?.classList.add('hidden');
      profileMenuMobile?.classList.add('hidden');
      dropdownContent?.classList.add('hidden');
    }
  }

  // Close dropdowns when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target;
    
    if (target && !(target as Element).closest('.features-dropdown-trigger')) {
      closeAllFeaturesDropdowns();
    }

    if (!profileMenu?.contains(target as Node)) {
      dropdownContent?.classList.add('hidden');
    }
  });

  // Toggle profile dropdown
  profileButton?.addEventListener('click', () => {
    dropdownContent?.classList.toggle('hidden');
  });

  // Handle logout
  logoutButton?.addEventListener('click', async () => {
    try {
      await signOut(auth);
      window.location.href = '/';
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
    }
  });

  // Initialize auth observer
  onAuthStateChanged(auth, updateUI);
  
  // Initial UI update
  updateUI(auth.currentUser);
</script>